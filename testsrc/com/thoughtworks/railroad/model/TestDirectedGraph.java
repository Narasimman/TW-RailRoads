package com.thoughtworks.railroad.model;import static org.junit.Assert.assertEquals;import java.util.List;import org.junit.After;import org.junit.AfterClass;import org.junit.Before;import org.junit.BeforeClass;import org.junit.Test;import com.thoughtworks.railroad.exception.WrongInputException;import com.thoughtworks.railroad.model.condition.MaxCondition;import com.thoughtworks.railroad.model.graph.IGraph;public class TestDirectedGraph {  private IGraph graph;  @BeforeClass  public static void setUpBeforeClass() throws Exception {  }  @AfterClass  public static void tearDownAfterClass() throws Exception {  }  @Before  public void setUp() throws Exception {    graph = GraphBuilder.getDirectedGraph();    String graphInput = "AB5, BC4, CD8, DC8, DE6, AD5, CE2, EB3, AE7";    String[] pairs = graphInput.split(",");    for (String pair : pairs) {      parseGraph(graph, pair);    }  }  private void parseGraph(IGraph graph, String pair) {    String input = pair.trim();    if (input.length() != 3) {      throw new WrongInputException(input);    }    String from = String.valueOf(input.charAt(0));    String to = String.valueOf(input.charAt(1));    int weight = Integer.parseInt(String.valueOf(input.charAt(2)));    Vertex vFrom = new Vertex(from);    Vertex vTo = new Vertex(to);    graph.addVertex(vFrom);    graph.addVertex(vTo);    graph.addEdge(vFrom, vTo, weight);  }  @After  public void tearDown() throws Exception {  }  @Test  public final void testCalculateDistance() {    String actual = graph.calculateDistance(new Vertex("A"),         new Vertex[]{      new Vertex("B"),       new Vertex("C")});    assertEquals("Should be 9", "9", actual);  }  @Test  public final void testGetShortestPath() {    Path actual = graph.getShortestPath(new Vertex("A"),         new Vertex("C"));    assertEquals("Distance should be 9", 9, actual.getDistance());  }  @Test  public final void testGetAllPaths() {    List<Path> actual = graph.getAllPaths(new Vertex("C"),         new Vertex("C"),         new MaxCondition(3),         new MaxCondition(4));    assertEquals("Should be 2 paths", 2, actual.size());  }}