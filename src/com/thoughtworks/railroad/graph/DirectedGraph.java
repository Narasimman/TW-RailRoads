package com.thoughtworks.railroad.graph;import java.util.ArrayList;import java.util.HashMap;import java.util.LinkedHashSet;import java.util.List;import java.util.Map;import java.util.Set;import com.thoughtworks.railroad.exception.NoSuchPathException;import com.thoughtworks.railroad.exception.NoSuchVertexException;/** * Implementation of a Directed graph * @author Narasimman * */public class DirectedGraph implements IGraph {  private Map<Vertex, Set<Edge>> vertices;  public DirectedGraph() {    vertices = new HashMap<Vertex, Set<Edge>>();  }  @Override  public boolean addVertex(Vertex v) {    if(v == null) {      throw new NoSuchVertexException("null");    }    if (!vertices.containsKey(v)) {      vertices.put(v, new LinkedHashSet<Edge>());      return true;    }    return false;  }  @Override  public boolean addEdge(Vertex from, Vertex to, int weight) {    if(from == null || to == null) {      throw new NoSuchVertexException("null");    }    Edge newEdge = new Edge(from, to, weight);    Set<Edge> sourceEdges = vertices.get(from);    if (sourceEdges.contains(newEdge)) {      sourceEdges.remove(newEdge);    }    return vertices.get(from).add(newEdge);  }  @Override  public String calculateDistance(Vertex from, Vertex[] stops) throws NoSuchPathException {    if(stops.length < 1) {      //TODO      throw new NoSuchPathException(stops.toString());    }    Vertex node = from;    int distance = 0;    for(int i = 0; i < stops.length; i++) {      Set<Edge> edges = vertices.get(node);      boolean validPath = false;      for(Edge edge : edges) {        Vertex stop = edge.getDestination();        if(stop.equals(stops[i])) {          validPath = true;          distance += edge.getDistance();          node = stops[i];          break;        }      }      if(!validPath) {        //TODO        throw new NoSuchPathException("NO SUCH PATH");      }    }    return String.valueOf(distance);  }  @Override  public String toString() {    StringBuilder sb = new StringBuilder();    for (Vertex v : vertices.keySet()) {      sb.append("<" + v.toString() + ">" + vertices.get(v) + "\n");    }    return sb.toString();  }}