package com.thoughtworks.railroad.view;import java.io.BufferedReader;import java.io.File;import java.io.FileReader;import java.io.IOException;import java.io.PrintWriter;import com.thoughtworks.railroad.controller.Command;import com.thoughtworks.railroad.controller.Controller;import com.thoughtworks.railroad.exception.WrongInputException;import com.thoughtworks.railroad.model.Vertex;import com.thoughtworks.railroad.model.graph.IGraph;/** * The Input Parser class that takes the file name, parses the input and calls * the router to invoke appropriate methods Pass in the graph and the input file *  * @author Narasimman *  */public class Parser {  PrintWriter writer;  private static final String LINE_SEPARATOR = "\r\n";  private final Controller controller;  public Parser(File file) throws IOException {    BufferedReader br = new BufferedReader(new FileReader(file));    controller = Controller.getController();    IGraph graph = controller.getGraph();    writer = new PrintWriter(System.out);    while (br.ready()) {      String line = br.readLine().toUpperCase();      String[] pairs = line.split(",");      for (String pair : pairs) {        parseGraph(graph, pair);      }    }    br.close();  }  /**   * Parse the graph file and construct the graph Data structure   *    * @param graph   * @param pair   */  private void parseGraph(IGraph graph, String pair) {    String input = pair.trim();    if (input.length() != 3) {      throw new WrongInputException(input);    }    String from = String.valueOf(input.charAt(0));    String to = String.valueOf(input.charAt(1));    int weight = Integer.parseInt(String.valueOf(input.charAt(2)));    Vertex vFrom = new Vertex(from);    Vertex vTo = new Vertex(to);    graph.addVertex(vFrom);    graph.addVertex(vTo);    graph.addEdge(vFrom, vTo, weight);  }  /**   * Executes the given command on the given graph and the controller directs to   * the correct procedure as per the command   *    * @param controller   * @param graph   * @param command   */  public void executeCommands(String command) {    if (command == null) {      return;    }    writer.write(execute(command) + LINE_SEPARATOR);    writer.flush();  }  public String execute(String command) {    if(command == null) {      return "";    }    int col = command.indexOf(":");    String commandType = command.substring(0, col).trim();    String commandArgs = command.substring(col + 1).trim();    if (commandType.equalsIgnoreCase(Command.SHORTEST.toString())) {      return controller.getShortestPath(commandArgs);    } else if (commandType.equalsIgnoreCase(Command.PATHS.toString())) {      return controller.getPaths(commandArgs);    } else if (commandType.equalsIgnoreCase(Command.DISTANCE.toString())) {      return controller.getDistance(commandArgs);    } else {      throw new WrongInputException(commandType);    }  }}