package com.thoughtworks.railroad.view;import java.io.BufferedReader;import java.io.FileReader;import java.io.IOException;import com.thoughtworks.railroad.controller.Controller;import com.thoughtworks.railroad.exception.WrongInputException;import com.thoughtworks.railroad.model.Vertex;import com.thoughtworks.railroad.model.graph.IGraph;public class Parser {  public Parser(IGraph graph, String filename) throws IOException {    BufferedReader br = new BufferedReader(new FileReader(filename));    while (br.ready()) {      String line = br.readLine().toUpperCase();      String[] pairs = line.split(",");      for (String pair : pairs) {        parse(graph, pair);      }    }    br.close();  }  private void parse(IGraph graph, String pair) {    String input = pair.trim();    if (input.length() != 3) {      throw new WrongInputException(input);    }    String from = String.valueOf(input.charAt(0));    String to = String.valueOf(input.charAt(1));    int weight = Integer.parseInt(String.valueOf(input.charAt(2)));    Vertex vFrom = new Vertex(from);    Vertex vTo = new Vertex(to);    graph.addVertex(vFrom);    graph.addVertex(vTo);    graph.addEdge(vFrom, vTo, weight);  }  public static void main(String[] args) throws IOException {    String filename = args[0];    Controller controller = Controller.getController();    Parser parser = new Parser(controller.getGraph(), filename);    System.out.println(controller.getGraph());    System.out.println(controller.getDistance("A-B-C"));    System.out.println(controller.getDistance("A-D"));    System.out.println(controller.getDistance("A-D-C"));    System.out.println(controller.getDistance("A-E-B-C-D"));    System.out.println(controller.getDistance("A-E-D"));    System.out.println(controller.getPathsWithMaxStops("C-C", 3));    System.out.println(controller.getPathsWithExactStops("A-C", 4));    System.out.println(controller.getShortestPath("A-C"));    System.out.println(controller.getShortestPath("B-B"));    System.out.println(controller.getPathsWithMaxDistance("C-C", 30));  }}