package com.thoughtworks.railroad.model;import java.util.ArrayList;import java.util.Collections;import java.util.List;/** *  * @author Narasimman * */public class Path {  private List<Edge> edgeList = new ArrayList<Edge>();  private int weight = 0;  private Path() {  }  private Path(Path other) {    edgeList.addAll(other.getEdgeList());    this.weight = other.getWeight();  }  public static Path emptyPath() {    return new Path();  }  public static Path copyPath(Path other) {    return new Path(other);  }  public void addEdge(Edge edge) {    edgeList.add(edge);    weight += edge.getDistance();  }  public void removeLastEdge() {    if (!edgeList.isEmpty()) {      Edge lastEdge = edgeList.get(edgeList.size() - 1);      this.weight -= lastEdge.getDistance();      edgeList.remove(edgeList.size() - 1);    }  }  public int getWeight() {    return weight;  }  public int getNumOfNodes() {    return edgeList.size();  }  public Vertex getLastNode() {    Vertex node = null;    if (!edgeList.isEmpty())      node = edgeList.get(edgeList.size() - 1).getDestination();    return node;  }  public List<Edge> getEdgeList() {    return Collections.unmodifiableList(edgeList);  }  public int compareTo(Path other) {    return this.getWeight() - other.getWeight();  }  public boolean hasWith(Path other) {    List<Edge> otherPath = other.getEdgeList();    List<Edge> thisPath = getEdgeList();    for (int i = 0; i < otherPath.size(); i++)      if (i >= thisPath.size()      || !otherPath.get(i).equals(thisPath.get(i)))        return false;    return true;  }  @Override  public String toString() {    StringBuilder sb = new StringBuilder();    sb.append("Path [edgeList=\n");    for (Edge e : edgeList)      sb.append(e.toString() + " ");    sb.append(",\nWeight=" + weight + "]\n");    return sb.toString();  }}