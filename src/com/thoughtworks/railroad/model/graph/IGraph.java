package com.thoughtworks.railroad.model.graph;import java.util.List;import com.thoughtworks.railroad.model.Path;import com.thoughtworks.railroad.model.Vertex;import com.thoughtworks.railroad.model.condition.Condition;/** * The graph interface that can be used to implement any type of graph and the * operations associated with them *  * @author Narasimman *  */public interface IGraph {  /**   * Add new vertex to the graph   *    * @param v   * @return addition success   */  public boolean addVertex(Vertex v);  /**   * Add edge between two vertices   *    * @param from   * @param to   * @param weight   * @return success?   */  public boolean addEdge(Vertex from, Vertex to, int weight);  /**   * get the number of vertices in the graph   *    * @return number of vertices   */  public int getNumberOfVertices();  /**   * get the distance from the source to the end making stops at all the   * stations in between   *    * @param from   * @param nodes   * @return total distance   */  public String calculateDistance(Vertex from, Vertex[] nodes);  /**   * get the shortest path between source and destination Internally Dijstra   * algorithm is implemented   *    * @param from   * @param to   * @return   */  public Path getShortestPath(Vertex from, Vertex to);  /**   * get all the paths from source to destination that passes through the   * condition filters   *    * @param from   * @param to   * @param terminalCondition   * @param maxCondition   * @return list of all paths   */  public List<Path> getAllPaths(Vertex from, Vertex to,      Condition terminalCondition, Condition maxCondition);}