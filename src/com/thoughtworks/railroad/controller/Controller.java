package com.thoughtworks.railroad.controller;import java.util.ArrayList;import java.util.List;import com.thoughtworks.railroad.exception.NoSuchPathException;import com.thoughtworks.railroad.exception.NoSuchVertexException;import com.thoughtworks.railroad.exception.WrongInputException;import com.thoughtworks.railroad.model.GraphBuilder;import com.thoughtworks.railroad.model.Path;import com.thoughtworks.railroad.model.Vertex;import com.thoughtworks.railroad.model.condition.ExactCondition;import com.thoughtworks.railroad.model.condition.MaxCondition;import com.thoughtworks.railroad.model.condition.MaxDistanceCondition;import com.thoughtworks.railroad.model.graph.IGraph;public class Controller {  private static IGraph graph;  private Controller() {    if (graph == null) {      graph = GraphBuilder.getDirectedGraph();    }  }  public static Controller getController() {    return new Controller();  }  public IGraph getGraph() {    return graph;  }  public String getShortestPath(String inputVertices) {    String nodes[] = inputVertices.split("-");    if (nodes.length < 2) {      throw new WrongInputException("Path: " + inputVertices);    }    String from = nodes[0].trim().toUpperCase();    Vertex start = new Vertex(from);    String to = nodes[1].trim().toUpperCase();    Vertex end = new Vertex(to);    Path shortest = null;    try {      shortest = graph.getShortestPath(start, end);    } catch (NoSuchPathException e) {      return e.getMessage();    } catch (NoSuchVertexException e) {      return e.getMessage();    }    return String.valueOf(shortest.getDistance());  }  public String getDistance(String inputPath) {    String nodes[] = inputPath.split("-");    if (nodes.length < 2) {      throw new WrongInputException("Distance: " + inputPath);    }    String from = nodes[0].trim().toUpperCase();    Vertex start = new Vertex(from);    Vertex[] stops = new Vertex[nodes.length - 1];    for (int i = 1; i < nodes.length; ++i) {      String stop = nodes[i].trim().toUpperCase();      stops[i - 1] = new Vertex(stop);    }    String distance = null;    try {      distance = graph.calculateDistance(start, stops);    } catch (NoSuchPathException e) {      return e.getMessage();    } catch (NoSuchVertexException e) {      return e.getMessage();    }    return distance;  }    public String getPathsWithExactStops(String inputVertices, int stops) {    String nodes[] = inputVertices.split("-");    if (nodes.length < 2) {      throw new WrongInputException("Path: " + inputVertices);    }    String from = nodes[0].trim().toUpperCase();    Vertex start = new Vertex(from);    String to = nodes[1].trim().toUpperCase();    Vertex end = new Vertex(to);    List<Path> paths = new ArrayList<Path>();    try {      paths = graph.getAllPaths(start, end, new ExactCondition(stops),           new MaxCondition(stops));    } catch (NoSuchPathException e) {      return e.getMessage();    } catch (NoSuchVertexException e) {      return e.getMessage();    }    return String.valueOf(paths.size());  }    public String getPathsWithMaxStops(String inputVertices, int stops) {    String nodes[] = inputVertices.split("-");    if (nodes.length < 2) {      throw new WrongInputException("Path: " + inputVertices);    }    String from = nodes[0].trim().toUpperCase();    Vertex start = new Vertex(from);    String to = nodes[1].trim().toUpperCase();    Vertex end = new Vertex(to);    List<Path> paths = new ArrayList<Path>();    try {      paths = graph.getAllPaths(start, end, new MaxCondition(stops),           new MaxCondition(graph.getNumberOfVertices()));    } catch (NoSuchPathException e) {      return e.getMessage();    } catch (NoSuchVertexException e) {      return e.getMessage();    }    return String.valueOf(paths.size());  }  public String getPathsWithMaxDistance(String inputVertices, int distance) {    String nodes[] = inputVertices.split("-");    if (nodes.length < 2) {      throw new WrongInputException("Path: " + inputVertices);    }    String from = nodes[0].trim().toUpperCase();    Vertex start = new Vertex(from);    String to = nodes[1].trim().toUpperCase();    Vertex end = new Vertex(to);    List<Path> paths = new ArrayList<Path>();    try {      paths = graph.getAllPaths(start, end, new MaxDistanceCondition(distance),           new MaxDistanceCondition(distance));    } catch (NoSuchPathException e) {      return e.getMessage();    } catch (NoSuchVertexException e) {      return e.getMessage();    }    return String.valueOf(paths.size());  }}